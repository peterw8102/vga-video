Name     LINE_DEC ;
PartNo   LINE_DEC ;
Date     13/11/2020 ;
Revision 01 ;
Designer Peter Wilson ;
Company  Home ;
Assembly None ;
Location  ;
Device   G22V10 ;

/* *************** INPUT PINS *********************/
PIN 1   = P0                      ; /* Low 3 bits of pixel count. All   */
PIN 2   = P1                      ; /* of these signals come from       */
PIN 3   = P2                      ; /* LINE_CNT. P3 isn't required here */
                                    /* and there aren't enough pins to  */
                                    /* include it.                      */
PIN 4   = C0                      ; /* 6 bit event counte - 0-49 then   */
PIN 5   = C1                      ; /* resets for the next row.         */
PIN 6   = C2                      ; /*                                  */
PIN 7   = C3                      ; /*                                  */
PIN 8   = C4                      ; /*                                  */
PIN 9   = C5                      ; /*                                  */
PIN 10  = LROW                    ; /* Last scan line in a char         */
PIN 11  = VBLNK                   ; /* High in vertical blank period    */
PIN 13  = PIX                     ; /* Pixel clock                      */

/* *************** OUTPUT PINS *********************/
PIN 17  = CNT_EN                  ; /* Low: allow mem counter to run      */
PIN 18  = HSYNC                   ; /* Horizontal Sync Pulse              */
PIN 19  = STORE                   ; /* Store current 74161 value in 74573 */
PIN 20  = LOAD                    ; /* Load 74573 value into 74161s       */
PIN 21  = NBYTE                   ; /* 1 pixel clock pulse at the start   */
                                    /* of a byte to load shift register   */
                                    /* from latches */
PIN 22  = LBYTE                   ; /* Latch next byte into the shift     */
                                    /* register latch.                    */
PIN 23  = ROWCLK                  ; /* Drives the 'next row' logic        */

/* CNT_EN is HIGH when data should be sent to the screen and the memory counter
 * incremented. When LOW the 74161s won't count.
 */
CNT_EN  = (!VBLNK & !C5 # (!VBLNK & C5 & !C4 & !C3));

/* HSYC is the horizontal sync pulse at the end of each line and lasts 6 count cycles */
!HSYNC  = (C5 & !C4 & C3) & !(C2 & C1 & C0) & !(!C2 & !C1 & !C0);

/* STORE should be go active high for 2 clock ticks during the blanking period but only
 * on the last character scan row (16 rows per character).
 */
STORE   = LROW & C5 & C3 & !C2 & C1;      /* 16 pixel times long */

/* LOAD goes active LOW to load the output from the 74573 latches into the
 * 74161 (preset). This happens at the end of every scan line. The 74573
 * value will be the same for 16 scan lines before moving to the next line via
 * the STORE signal. In this way there's no wasted memory and more
 * importantly less memory to bitblit to do things like scrolling.
 */
!LOAD   = (C5 & C3 & C2 & C1 & !VBLNK);    /* 16 pixel times long */

/* ROWCLK. Goes high for one row event clock cycle. The low going edge then
 * increments the row address counter.
 */
ROWCLK = (C5 & C4 & C0); /* Triggered at 50 and lasts one clock. */

/** Control signals for the shift register **/
!NBYTE = CNT_EN & !P2 & !P1 & !P0;         /* First half (20ns) of pixel 0 of byte to load the shift register from the latches */
LBYTE  = CNT_EN & PIX & !P2 & !P1 & !P0;   /* Load next byte into register latches. */
/*
!NBYTE = CNT_EN & PIX & !P2 & !P1 & !P0;
LBYTE  = CNT_EN & !P2 &  P1 &  P0;
*/
